# Shadow AI Usage Detection - MVP Product Requirements Document

## Project Overview

**Product Name:** Shadow AI Usage Detection Tool
**Version:** 1.0 MVP
**Date:** August 4, 2025
**Project Type:** Simple AI Detection Tool

## Executive Summary

Shadow AI Usage Detection is a lightweight tool that detects possible unauthorized use of AI tools (like ChatGPT or other AI assistants) in code snippets. The MVP focuses on core heuristic detection with a simple interface and clear results.

## Problem Statement

Developers and educators need a quick way to determine if code was likely generated by AI tools. Current solutions are either too complex or don't exist for simple use cases.

## Target Users

- **Code Reviewers**: Quick AI detection during reviews
- **Educators**: Check student submissions for AI assistance
- **Team Leads**: Spot-check code for AI patterns
- **Individual Developers**: Self-check their own code

## Core Features & Requirements

### 1. AI Detection Engine (Core)
**Priority: Critical**

#### Basic Heuristic Checks
- **Comment Pattern Analysis**: Detect repetitive, overly structured comments
- **Variable Naming Patterns**: Identify generic names like `data`, `result`, `items`, `temp`
- **Code Structure Analysis**: Detect overly consistent formatting and indentation
- **AI Language Patterns**: Identify typical AI phrasing in comments
- **Function/Method Patterns**: Detect standard AI-generated function structures

#### Detection Rules
- Repetitive comment styles (same format, similar phrases)
- Generic variable names in sequence
- Perfect indentation and spacing consistency
- Overly descriptive comments for simple operations
- Standard error handling patterns

### 2. Input Support (Core)
**Priority: High**

- **File Upload**: Single file analysis (.py, .js, .java, .cpp, .go, etc.)
- **Text Input**: Paste code directly into interface
- **Multiple Files**: Batch analysis of 2-5 files
- **Common Languages**: Python, JavaScript, Java, C++, Go, Rust

### 3. Simple CLI Interface (Core)
**Priority: High**

#### Basic Commands
```bash
shadow-detect analyze <file>
shadow-detect check --text "code snippet"
shadow-detect scan <directory> --recursive
shadow-detect compare <file1> <file2>
```

### 4. Web Interface (Core)
**Priority: Medium**

- **Simple Upload**: Drag & drop file upload
- **Text Area**: Paste code for quick analysis
- **Results Display**: Clear "AI-Generated" or "Human-Written" with confidence %
- **Explanation**: Short reason for the determination

### 5. Enhanced Features (MVP+)
**Priority: Medium**

#### A. Confidence Scoring
- Percentage confidence (0-100%)
- Risk levels: Low, Medium, High
- Multiple indicators breakdown

#### B. Batch Comparison Tool
- Compare multiple files at once
- Show relative AI likelihood across files
- Highlight most suspicious files

#### C. Pattern Library
- Common AI patterns database
- Examples of detected patterns
- User can add custom patterns

#### D. Code Similarity Detection
- Detect if multiple files have similar AI patterns
- Flag potential copy-paste from AI tools
- Cross-file pattern matching

#### E. Simple Dashboard
- Upload history and results
- Basic statistics (% AI detected over time)
- Pattern frequency charts

## Technical Specifications

### Architecture Requirements
- **Language**: Python 3.8+ for core engine
- **Web Framework**: Flask or FastAPI for web interface
- **Frontend**: Simple HTML/CSS/JavaScript (no complex frameworks)
- **Storage**: Local file system + SQLite for history
- **Performance**: Process files up to 5MB in under 5 seconds

### Output Format
- **Result**: "Likely AI-Generated" or "Likely Human-Written"
- **Confidence**: Percentage (0-100%)
- **Reason**: 1-2 sentence explanation
- **Patterns Found**: List of detected AI indicators

## Enhanced MVP Features (Standout Items)

### 1. Interactive AI Pattern Quiz
**Why it's valuable**: Educates users about AI detection while building trust in the tool

- 10-question quiz showing code snippets
- Users guess "AI" or "Human" before seeing results
- Explains detection reasoning for each example
- Tracks user accuracy vs tool accuracy
- Builds confidence in the detection system

### 2. Code Style Inconsistency Detector
**Why it's valuable**: Catches mixed AI/Human code that simple tools miss

- Detects when coding style changes mid-file
- Identifies sections that look different from the rest
- Flags potential "AI injection" into human code
- Shows style consistency scores per function/class

### 3. Timestamp Analysis (Bonus)
**Why it's valuable**: Uses file metadata that other tools ignore

- Analyzes file creation/modification patterns
- Flags files created very quickly (AI speed indicator)
- Compares coding speed to developer's normal pace
- Requires Git history for full effectiveness

### 4. AI Tool Signature Detection
**Why it's valuable**: Identifies specific AI tools used

- Detects patterns specific to ChatGPT, Copilot, etc.
- Each AI tool has slightly different patterns
- Helps identify which tool was likely used
- Builds library of tool-specific signatures

## Project Timeline

### Week 1-2: Core Detection Engine
- Implement basic heuristic checks
- Set up project structure
- Create test cases

### Week 3-4: CLI Interface
- Build command-line interface
- Add file processing capabilities
- Implement output formatting

### Week 5-6: Web Interface
- Create simple web interface
- Add file upload functionality
- Display results clearly

### Week 7-8: Enhanced Features & Polish
- Add confidence scoring
- Implement quiz feature
- Create documentation and README
- Testing and bug fixes

## Deliverables

### Core Deliverables
1. **CLI Tool**: Command-line interface for code analysis
2. **Web Interface**: Simple web app for file upload and analysis
3. **Detection Engine**: Heuristic-based AI detection logic
4. **Documentation**: README with setup, usage, and examples
5. **Test Suite**: Sample files and expected results

### Enhanced Deliverables (MVP+)
1. **Interactive Quiz**: Educational tool for understanding AI patterns
2. **Style Inconsistency Detector**: Advanced pattern detection
3. **Basic Dashboard**: Simple analytics and history
4. **Pattern Library**: Database of common AI indicators

## Conclusion

This MVP focuses on delivering a working AI detection tool with clear value while keeping complexity manageable. The enhanced features make it stand out from basic solutions without overwhelming the development scope. The project can be completed in 6-8 weeks and provides a solid foundation for future enhancements.
